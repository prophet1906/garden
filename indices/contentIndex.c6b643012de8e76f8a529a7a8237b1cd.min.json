{"/":{"title":"Shubham's Digital Gardenü™¥","content":"Hi, there üëã. My name is Shubham. I am skilled at solving real problems with available resources. I am fortunate enough to work alongside so many extraordinary people and learn from them. I set aside a few minutes every day to share what I'm learning here in my digital garden.\n\nIn this garden üè°, I publish my notes, journeys, and projects as [obsidian](https://obsidian.md/) notes that I will continue to maintain. There is no perfect end state, and it will always be a work in progress!\n\n## Map of Contents\n- [[system-design/System Design MOC |System Design]]","lastmodified":"2022-04-30T17:33:13.048219244Z","tags":null},"/books/System-Design-Interview-by-Alex-Xu":{"title":"System Design Interview by Alex Xu","content":"Available hereüëâ[System Design Interview ‚Äì An insider's guide eBook : Xu, Alex: Amazon.in: Kindle Store](https://www.amazon.in/System-Design-Interview-Insiders-Guide-ebook/dp/B08B3FWYBX)","lastmodified":"2022-04-30T17:33:13.048219244Z","tags":null},"/system-design/Scale-from-0-to-Millions-of-Users":{"title":"Scale from Zero to Millions of Users","content":"## Single Server Setup\nThe Design of every complex system starts with something simple, everything is running on one server. Consider a single server setup where everything is running in on one server: web, app, DB, cache, etc. as shown below.\n![[Excalidraw/Drawing 2022-04-30 21.28.47.excalidraw.png]]\n\n## Basic Flow\nTo understand this setup, we can inspect request flow and traffic source.\n![[Excalidraw/Drawing 2022-04-30 21.57.17.excalidraw.png]]\n\n### Request flow\n1. Users access the server using domain names from the browser/app\n2. [[DNS]] resolves the domain name to a valid [[IP]] address\n3. An [[IP]] address is returned to the browser/app\n4. Browser/app uses the [[IP]] address to send [[HTTP]] requests to your server\n5. The Web server returns [[HTML]] pages or [[JSON]] response\n\n### Traffic source\n1. Web application: It uses a combination of server-side languages (Java, Nodejs, etc) to handle business logic, storage, etc, and client-side languages (HTML and Javascript) for presentation.\n2. Mobile application: A client-side app(Android, iOS, etc) running on a mobile device uses [[HTTP]] protocol to communicate with the webserver. [[JSON]] is a commonly used response format because of if simplicity.\n\n## Database\nGrowing user base requires more servers. The most basic segregation we can do here is separating web/mobile(web tier) and database(data tier) servers. This decoupling will allow them to be scaled independently.\n![[Excalidraw/Drawing 2022-04-30 22.25.25.excalidraw.png]]\n\n## Scaling : Vertical vs Horizontal\n## Load balancer\n## Database Replication\n## Cache\n### Cache tier\n## Content Delivery Network (CDN)\n## Stateful Architecture\n## Stateless Architecture\n## Data Centers\n## Message Queue\n## Logging, Metrics, Automation\n## Database scaling\n### Vertical scaling\n### Horizontal scaling\n## Conclusion: Millions of users and beyond\n\n## References\n- [[books/System Design Interview by Alex Xu]]","lastmodified":"2022-04-30T17:33:13.048219244Z","tags":null},"/system-design/System-Design-MOC":{"title":"System Design MOC","content":"- [[system-design/Scale from 0 to Millions of Users|Scale from 0 to Millions of Users]]","lastmodified":"2022-04-30T17:33:13.048219244Z","tags":null}}