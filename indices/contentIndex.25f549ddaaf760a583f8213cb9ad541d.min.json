{"/":{"title":"Shubham's Digital Gardenü™¥","content":"Hi, there üëã. My name is Shubham. I am skilled at solving real world problems with available resources. I am fortunate enough to work alongside so many extraordinary people and learn from them. I set aside a few minutes every day to share what I'm learning here in my digital garden.\n\nIn this garden üè°, I publish my notes, journey, and projects as [obsidian](https://obsidian.md/) notes that I will continue to maintain. There is no perfect end state, and it will always be a work in progress!\n\n## Recent Notes\n- [[github/Github Contribution Workflow|Github: Contribution Workflow]]\n\n## Map of Contents\n- [[system-design/System Design MOC |System Design]]\n- [[github/Github MOC |Github]]","lastmodified":"2022-05-07T05:30:47.074583366Z","tags":null},"/books/System-Design-Interview-by-Alex-Xu":{"title":"System Design Interview by Alex Xu","content":"Available hereüëâ[System Design Interview ‚Äì An insider's guide eBook : Xu, Alex: Amazon.in: Kindle Store](https://www.amazon.in/System-Design-Interview-Insiders-Guide-ebook/dp/B08B3FWYBX)","lastmodified":"2022-05-07T05:30:47.074583366Z","tags":null},"/github/Github-Contribution-Workflow":{"title":"Github: Contribution Workflow","content":"This note covers the workflow I use to contribute to open-source projects. I am using `github.com` for simplicity, but basic concepts are the same for all git-based VCS.\n\n## Finding Interesting Projects\nWhen starting your open source contribution journey, the first step is to find a project that interests you. Many sites index good issues for beginners. I am listing down a few sites which I felt comfortable using when getting started.\n- [Good First Issues](https://goodfirstissues.com/index.html)\n- [Up For Grabs (up-for-grabs.net)](https://up-for-grabs.net/#/)\n- \n## Forking Repository\nOnce, you have figured out which project you want to contribute to, you can create a fork. A fork in github is an exact copy of some existing repository but under your username or org. You have full access to the forked repository, consider it your copy of code. You are going to add stuff here.\n![[Excalidraw/Drawing 2022-05-06 15.47.46.excalidraw.png]]\n\n## Developing in Forked Repository\nBefore you can start contributing to any project, you need to first clone the forked repository in your development machine. Cloning will bring a copy of your forked repository to your local system. Once you have cloned the forked repository, you can start doing changes.  In the figure below, we start by creating `file1` in step 3 and committing them to the local branch `feature-branch`. After committing targeted changes in the local branch, you can push this local branch to a remote forked repository. After reviewing code changes, you can either merge these changes to the `main` branch or create a pull request against the `upstream` source project. The following figure shows the workflow used to do changes in a forked repo.\n![[Excalidraw/Drawing 2022-05-06 15.52.12.excalidraw.png]]\n\n### Staging changes\nAny file changes(including creation \u0026 deletion) stay in the working area by default. Git also provides us with a preparation area called staging. Whatever is present in staging gets saved permanently to `.git` when we commit. The following figure shows how the file changes move when using git commands.\n![[Excalidraw/Drawing 2022-05-07 09.09.16.excalidraw.png]]\n\n## Pull Requests\nPull requests are not part of git, but rather part of git-based websites. Pull requests provide easy to use interface to review changes done by contributors and approve, request changes or merge them in your repo. A pull request has 2 parts to it, `base(target)` refers to the place where you want to contribute, and `compare(source)` refers to the place from where the changes should be picked for contribution. Both `base` and `compare` can refer to different repo and branch. The following figure shows how pull requests help maintainers merge changes to their repositories.\n![[Excalidraw/Drawing 2022-05-07 08.38.17.excalidraw.png]]\n\n## Sync Fork Repository\nUsually, any open source project has a very high commit frequency, as there are so many contributors who keep on adding stuff on the go. This also means, your fork is going to go out-of-sync/outdated very frequently. Thus, we need to keep `main` from our fork repository in sync with `main` from the source project. This can be done using the concept of upstream. Your local git repository has a table of remote URLs, this can be viewed using `git remote -v`. You can configure your local repository to have an `upstream` remote URL referring to the source project repo. You always pull changes from `upstream: main` and push them to `origin: main`.\n![[Excalidraw/Drawing 2022-05-07 09.18.20.excalidraw.png]]\n\n## Important Tips\n- Avoid changes to `main` branches, if you commit something in main and it diverges from `upstream: main`, it will become very difficult to reconcile changes\n- Always create a new branch from `main` when working on a new feature\n- A fork can be created under any `user` or `org`, you can have a fork under org to share across the team\n- As long as your `.git` folder is intact, you can recover any changes you lose from the working directory\n- Pull requests are not essential, but help the maintainer when reviewing changes\n- \n## Conclusion\nThis note only covers the bare minimum required to start contributing to git projects. Additional reading is recommended to understand git fundamentals.","lastmodified":"2022-05-07T05:30:47.074583366Z","tags":null},"/github/Github-MOC":{"title":"Github MOC","content":"[[github/Github Contribution Workflow|Github: Contribution Workflow]]","lastmodified":"2022-05-07T05:30:47.074583366Z","tags":null},"/system-design/Scale-from-0-to-Millions-of-Users":{"title":"Scale from Zero to Millions of Users","content":"## Single Server Setup\nThe Design of every complex system starts with something simple. Consider a single server setup where everything is running in on one server: web, app, DB, cache, etc. as shown below.\n![[Excalidraw/Drawing 2022-04-30 21.28.47.excalidraw.png]]\n\n## Basic Flow\nTo understand this setup, we can inspect **request flow** and **traffic source**.\n![[Excalidraw/Drawing 2022-04-30 21.57.17.excalidraw.png]]\n\n### Request flow\n1. Users access the server using domain names from the browser/app\n2. [[DNS]] resolves the domain name to a valid [[IP]] address\n3. An [[IP]] address is returned to the browser/app\n4. Browser/app uses the [[IP]] address to send [[HTTP]] requests to your server\n5. The Web server returns [[HTML]] pages or [[JSON]] response\n\n### Traffic source\n1. **Web application:** It uses a combination of server-side languages (Java, Nodejs, etc) to handle business logic, storage, etc, and client-side languages (HTML and Javascript) for presentation.\n2. **Mobile application:** A client-side app(Android, iOS, etc) running on a mobile device uses [[HTTP]] protocol to communicate with the webserver. [[JSON]] is a commonly used response format because of if simplicity.\n\n## Database\nGrowing user base requires more servers. The most basic segregation we can do here is separating web/mobile(web tier) and database(data tier) servers. This decoupling will allow them to be scaled independently.\n![[Excalidraw/Drawing 2022-04-30 22.25.25.excalidraw.png]]\n\n### Which databases to use?\nWe have choice between relational and non-relational databases.\n\nRelational databases (RDBMS) or SQL databases represent and store data in tables and rows. You can perform join operation using SQL across different database tables.\n\nNon-Relational databases or NoSQL databases usually don't support join operations \u0026 can be grouped into 4 categories:\n- key-value stores\n- graph stores\n- column stores\n- document stores\n\nFor most cases relational databases are best option given historical track record of over 40 years. There are some scenarios where non-relational databases might be the right choice. Those specific use cases are as follows:\n- Your application requires super-low latency.\n- Your data is unstructured, no relational data\n- You only need to serialize and deserialize data (JSON, XML, YAML, etc.)\n- You need to store a massive amount of data.\n\n## Scaling : Vertical vs Horizontal\n## Load balancer\n## Database Replication\n## Cache\n### Cache tier\n## Content Delivery Network (CDN)\n## Stateful Architecture\n## Stateless Architecture\n## Data Centers\n## Message Queue\n## Logging, Metrics, Automation\n## Database scaling\n### Vertical scaling\n### Horizontal scaling\n## Conclusion: Millions of users and beyond\n\n## References\n- [[books/System Design Interview by Alex Xu]]","lastmodified":"2022-05-07T05:30:47.074583366Z","tags":null},"/system-design/System-Design-MOC":{"title":"System Design MOC","content":"- [[system-design/Scale from 0 to Millions of Users|Scale from 0 to Millions of Users]]","lastmodified":"2022-05-07T05:30:47.074583366Z","tags":null}}