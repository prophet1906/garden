{"/":{"title":"Shubham's Digital Gardenü™¥","content":"Hi, there üëã. My name is Shubham. I am skilled at solving real problems with available resources. I am fortunate enough to work alongside so many extraordinary people and learn from them. I set aside a few minutes every day to share what I'm learning here in my digital garden.\r\n\r\nIn this garden üè°, I publish my notes, journeys, and projects as [obsidian](https://obsidian.md/) notes that I will continue to maintain. There is no perfect end state, and it will always be a work in progress!\r\n\r\n## Map of Contents\r\n- [[system-design/System Design MOC |System Design]]","lastmodified":"2022-04-30T17:41:30.874722145Z","tags":null},"/books/System-Design-Interview-by-Alex-Xu":{"title":"System Design Interview by Alex Xu","content":"Available hereüëâ[System Design Interview ‚Äì An insider's guide eBook : Xu, Alex: Amazon.in: Kindle Store](https://www.amazon.in/System-Design-Interview-Insiders-Guide-ebook/dp/B08B3FWYBX)","lastmodified":"2022-04-30T17:41:30.874722145Z","tags":null},"/system-design/Scale-from-0-to-Millions-of-Users":{"title":"Scale from Zero to Millions of Users","content":"## Single Server Setup\r\nThe Design of every complex system starts with something simple, everything is running on one server. Consider a single server setup where everything is running in on one server: web, app, DB, cache, etc. as shown below.\r\n![[Excalidraw/Drawing 2022-04-30 21.28.47.excalidraw.png]]\r\n\r\n## Basic Flow\r\nTo understand this setup, we can inspect request flow and traffic source.\r\n![[Excalidraw/Drawing 2022-04-30 21.57.17.excalidraw.png]]\r\n\r\n### Request flow\r\n1. Users access the server using domain names from the browser/app\r\n2. [[DNS]] resolves the domain name to a valid [[IP]] address\r\n3. An [[IP]] address is returned to the browser/app\r\n4. Browser/app uses the [[IP]] address to send [[HTTP]] requests to your server\r\n5. The Web server returns [[HTML]] pages or [[JSON]] response\r\n\r\n### Traffic source\r\n1. Web application: It uses a combination of server-side languages (Java, Nodejs, etc) to handle business logic, storage, etc, and client-side languages (HTML and Javascript) for presentation.\r\n2. Mobile application: A client-side app(Android, iOS, etc) running on a mobile device uses [[HTTP]] protocol to communicate with the webserver. [[JSON]] is a commonly used response format because of if simplicity.\r\n\r\n## Database\r\nGrowing user base requires more servers. The most basic segregation we can do here is separating web/mobile(web tier) and database(data tier) servers. This decoupling will allow them to be scaled independently.\r\n![[Excalidraw/Drawing 2022-04-30 22.25.25.excalidraw.png]]\r\n\r\n## Scaling : Vertical vs Horizontal\r\n## Load balancer\r\n## Database Replication\r\n## Cache\r\n### Cache tier\r\n## Content Delivery Network (CDN)\r\n## Stateful Architecture\r\n## Stateless Architecture\r\n## Data Centers\r\n## Message Queue\r\n## Logging, Metrics, Automation\r\n## Database scaling\r\n### Vertical scaling\r\n### Horizontal scaling\r\n## Conclusion: Millions of users and beyond\r\n\r\n## References\r\n- [[books/System Design Interview by Alex Xu]]","lastmodified":"2022-04-30T17:41:30.874722145Z","tags":null},"/system-design/System-Design-MOC":{"title":"System Design MOC","content":"- [[system-design/Scale from 0 to Millions of Users|Scale from 0 to Millions of Users]]","lastmodified":"2022-04-30T17:41:30.874722145Z","tags":null}}